package co.test.hulk.store.controller;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.zip.DataFormatException;
import java.util.zip.Deflater;
import java.util.zip.Inflater;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.http.ResponseEntity.BodyBuilder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import co.test.hulk.store.exception.ResourceNotFoundException;
import co.test.hulk.store.model.Toy;
import co.test.hulk.store.repository.ToyRepository;

@CrossOrigin(origins = "http://localhost:4200")
@RestController
@RequestMapping("/api/v1")
public class ToyController {
	@Autowired
	private ToyRepository toyRepository;

	@PersistenceContext
	private EntityManager em;

	@RequestMapping("/toys")
	public List getAllToys() {
		List lista = toyRepository.findAll();
		return lista;
	}

	@GetMapping("/toys/{id}")
	public ResponseEntity<Toy> getToyById(@PathVariable(value = "id") Long toyId) throws ResourceNotFoundException {
		Toy toy = toyRepository.findById(toyId)
				.orElseThrow(() -> new ResourceNotFoundException("Toy not found for this id :: " + toyId));
		return ResponseEntity.ok().body(toy);
	}

	@PostMapping("/toys")
	public Toy createToy(@Valid @RequestBody Toy toy) {
		return toyRepository.save(toy);
	}

	@PostMapping("/toys")
	public BodyBuilder uplaodImage(@RequestParam("imageFile") MultipartFile file) throws IOException {
		System.out.println("Original Image Byte Size - " + file.getBytes().length);
		Toy img = new Toy(file.getOriginalFilename(), compressBytes(file.getBytes()));
		toyRepository.save(img);
		return ResponseEntity.status(HttpStatus.OK);
	}

	@PutMapping("/toys/{id}")
	public ResponseEntity<Toy> updateToy(@PathVariable(value = "id") Long toyId, @Valid @RequestBody Toy toyDetails)
			throws ResourceNotFoundException {
		Toy toy = toyRepository.findById(toyId)
				.orElseThrow(() -> new ResourceNotFoundException("Toy not found for this id :: " + toyId));

		toy.setName(toyDetails.getName());
		final Toy updatedToy = toyRepository.save(toy);
		return ResponseEntity.ok(updatedToy);
	}

	@DeleteMapping("/toys/{id}")
	public Map<String, Boolean> deleteToy(@PathVariable(value = "id") Long toyId) throws ResourceNotFoundException {
		Toy toy = toyRepository.findById(toyId)
				.orElseThrow(() -> new ResourceNotFoundException("Toy not found for this id :: " + toyId));

		toyRepository.delete(toy);
		Map<String, Boolean> response = new HashMap<>();
		response.put("deleted", Boolean.TRUE);
		return response;
	}

	public static byte[] compressBytes(byte[] data) {
		Deflater deflater = new Deflater();

		deflater.setInput(data);

		deflater.finish();

		ByteArrayOutputStream outputStream = new ByteArrayOutputStream(data.length);

		byte[] buffer = new byte[1024];

		while (!deflater.finished()) {

			int count = deflater.deflate(buffer);

			outputStream.write(buffer, 0, count);

		}

		try {

			outputStream.close();

		} catch (IOException e) {

		}

		System.out.println("Compressed Image Byte Size - " + outputStream.toByteArray().length);

		return outputStream.toByteArray();

	}

	// uncompress the image bytes before returning it to the angular application

	public static byte[] decompressBytes(byte[] data) {

		Inflater inflater = new Inflater();

		inflater.setInput(data);

		ByteArrayOutputStream outputStream = new ByteArrayOutputStream(data.length);

		byte[] buffer = new byte[1024];

		try {

			while (!inflater.finished()) {

				int count = inflater.inflate(buffer);

				outputStream.write(buffer, 0, count);

			}

			outputStream.close();

		} catch (IOException ioe) {

		} catch (DataFormatException e) {

		}

		return outputStream.toByteArray();

	}
}
